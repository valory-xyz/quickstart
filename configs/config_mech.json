{
    "name": "Mech Predict",
    "hash": "bafybeihrjvinvcljb3hqb6gucbadnnknszdw6742zd2oy2sz7k4vn25e5u",
    "description": "The mech executes AI tasks requested on-chain and delivers the results to the requester.",
    "image": "https://gateway.autonolas.tech/ipfs/bafybeidzpenez565d7vp7jexfrwisa2wijzx6vwcffli57buznyyqkrceq",
    "service_version": "v0.9.0",
    "home_chain": "gnosis",
    "configurations": {
        "gnosis": {
            "agent_id": 37,
            "nft": "bafybeiguk5i657q5bvyxzha66finzxpbaef4uvl6knjuwxlrs6cr7v33sa",
            "threshold": 1,
            "use_mech_marketplace": false,
            "fund_requirements": {
                "0x0000000000000000000000000000000000000000": {
                    "agent": 1500000000000000000,
                    "safe": 0
                }
            }
        }
    },
    "env_variables": {
        "GNOSIS_LEDGER_RPC": {
            "name": "Gnosis ledger RPC",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "SERVICE_REGISTRY_ADDRESS": {
            "name": "Service registry address",
            "description": "",
            "value": "0x9338b5153AE39BB89f50468E608eD9d764B755fD",
            "provision_type": "fixed"
        },
        "STAKING_TOKEN_CONTRACT_ADDRESS": {
            "name": "Staking contract address",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "MECH_MARKETPLACE_ADDRESS": {
            "name": "Mech Marketplace address",
            "description": "The contract address of the mech marketplace, where your mech should be created. Supported addresses: 0x735FAAb1c4Ec41128c367AFb5c3baC73509f70bB or 0xad380C51cd5297FbAE43494dD5D407A2a3260b58",
            "value": "0x735FAAb1c4Ec41128c367AFb5c3baC73509f70bB",
            "provision_type": "user"
        },
        "API_KEYS": {
            "name": "API keys",
            "description": "API keys are the key value pairs for every AI tool your mech uses. The name of the tool will be the key used in the file. The value will be an array of valid API keys the tool can use.",
            "value": "{\"openai\":[\"dummy_api_key\"], \"google_api_key\":[\"dummy_api_key\"]}",
            "provision_type": "user"
        },
        "AGENT_ID": {
            "name": "Agent ID",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "METADATA_HASH": {
            "name": "Metadata hash",
            "description": "The IPFS hash of the Mech metadata JSON",
            "value": "f01701220caa53607238e340da63b296acab232c18a48e954f0af6ff2b835b2d93f1962f0",
            "provision_type": "user"
        },
        "MECH_TO_CONFIG": {
            "name": "Mech to config",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "ON_CHAIN_SERVICE_ID": {
            "name": "On-chain service ID",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "TOOLS_TO_PACKAGE_HASH": {
            "name": "Tools to package mapping",
            "description": "Tools to package hash tracks services for each tool packages.",
            "value": "{\"openai-gpt-3.5-turbo-instruct\":\"bafybeigz5brshryms5awq5zscxsxibjymdofm55dw5o6ud7gtwmodm3vmq\",\"openai-gpt-3.5-turbo\":\"bafybeigz5brshryms5awq5zscxsxibjymdofm55dw5o6ud7gtwmodm3vmq\",\"openai-gpt-4\":\"bafybeigz5brshryms5awq5zscxsxibjymdofm55dw5o6ud7gtwmodm3vmq\"}",
            "provision_type": "user"
        },
        "ETHEREUM_LEDGER_RPC_0": {
            "name": "Ethereum ledger RPC 0",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "GNOSIS_LEDGER_RPC_0": {
            "name": "Gnosis ledger RPC 0",
            "description": "",
            "value": "",
            "provision_type": "computed"
        },
        "MECH_TYPE": {
            "name": "Mech type",
            "description": "Type of mech to deploy (Native, Token, or Nevermined)",
            "value": "Native",
            "provision_type": "user"
        },
        "MECH_REQUEST_PRICE": {
            "name": "Mech request price",
            "description": "The price for requesting the mech's services in wei.",
            "value": "10000000000000000",
            "provision_type": "user"
        },
        "PROFIT_SPLIT_BALANCE": {
            "name": "Mech split balance",
            "description": "The balance we want to reach in order to trigger split balance.",
            "value": "1000000000000000000",
            "provision_type": "user"
        }
    }
}