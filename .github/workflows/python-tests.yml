name: Quickstart Tests
on:
  push:
    branches:
      - feat/updating_test_script
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RPC_URL: ${{ secrets.RPC_URL }}
      BACKUP_WALLET: ${{ secrets.BACKUP_WALLET }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      STAKING_CHOICE: ${{ secrets.STAKING_CHOICE }}
      DOCKER_LOGS_DIR: ${GITHUB_WORKSPACE}/logs
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Set up Docker
      run: |
        # Stop and remove existing Docker installations
        sudo systemctl stop docker || true
        sudo systemctl stop docker.socket || true
        
        # Clean existing installations
        sudo apt-get remove -y docker docker-engine docker.io containerd runc
        sudo apt-get update
        
        # Install prerequisites
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release

        # Add Docker's GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        # Add Docker repository
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        # Install Docker
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        
        # Get current user info
        CURRENT_USER=$(id -u)
        CURRENT_GROUP=$(id -g)
        
        # Configure Docker daemon with user namespace remapping
        sudo mkdir -p /etc/docker
        echo '{
          "userns-remap": "'$CURRENT_USER':'$CURRENT_GROUP'"
        }' | sudo tee /etc/docker/daemon.json
        
        # Start Docker service
        sudo systemctl start docker
        
        # Wait for Docker to be ready
        echo "Waiting for Docker to be ready..."
        timeout 30 bash -c 'until docker info; do sleep 1; done'
        
        # Setup logs directory
        mkdir -p logs
        sudo chmod -R 777 logs
        sudo chown -R $CURRENT_USER:$CURRENT_GROUP logs
        
        # Debug permissions
        echo "Logs directory permissions:"
        ls -la logs/
        
        # Add user to docker group and apply changes
        sudo usermod -aG docker $USER
        newgrp docker
        
        # Create docker-compose override for volume mounts
        cat << EOF > docker-compose.override.yml
        version: '3'
        services:
          traderpearl_tm_0:
            user: "$CURRENT_USER:$CURRENT_GROUP"
            volumes:
              - ./logs:/logs
          traderpearl_abci_0:
            user: "$CURRENT_USER:$CURRENT_GROUP"
            volumes:
              - ./logs:/logs
        EOF
        
        # Show created files
        echo "Docker Compose override:"
        cat docker-compose.override.yml
        
        # Verify Docker setup
        docker --version
        docker info
        docker ps
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git
        
    - name: Clean Python cache
      run: |
        sudo rm -rf ~/.cache/pip
        sudo rm -rf ~/.cache/poetry
        sudo rm -rf .pytest_cache
        sudo rm -rf .venv
        sudo rm -rf poetry.lock
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Create .env file
      run: |
        echo "RPC_URL=${RPC_URL}" > .env
        echo "BACKUP_WALLET=${BACKUP_WALLET}" >> .env
        echo "TEST_PASSWORD=${TEST_PASSWORD}" >> .env
        echo "PRIVATE_KEY=${PRIVATE_KEY}" >> .env
        echo "STAKING_CHOICE=${STAKING_CHOICE}" >> .env
        echo "DOCKER_LOGS_DIR=${DOCKER_LOGS_DIR}" >> .env
        
    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        poetry env use python3.10
        poetry install --no-interaction
        
    - name: Run tests
      run: |
        # Debug Docker container info
        echo "Docker container details:"
        docker ps -a
        for container in $(docker ps -q); do
          echo "==== Container Info: $container ===="
          docker inspect $container
          echo "==== Container Logs: $container ===="
          docker logs $container
        done

        # Debug volume mounts
        echo "Volume mount details:"
        docker volume ls
        
        # Show final directory structure
        echo "Directory structure before tests:"
        ls -la
        ls -la logs/
        
        # Create test file to verify permissions
        echo "Testing write permissions to logs directory..."
        touch logs/test.txt
        ls -la logs/
        
        poetry run pytest -v tests/test_run_service.py -s --log-cli-level=DEBUG

    - name: Debug container failure
      if: failure()
      run: |
        echo "==== Docker container status ===="
        docker ps -a
        
        echo "==== Container logs ===="
        for container in $(docker ps -aq); do
          echo "=== Logs for $container ==="
          docker logs $container
          
          echo "=== Inspect for $container ==="
          docker inspect $container
        done
        
        echo "==== Directory permissions ===="
        ls -la logs/
        ls -la ${GITHUB_WORKSPACE}/logs/

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: |
          logs/
          docker-compose.override.yml
          .env